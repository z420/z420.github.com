<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Mz's Blog]]></title>
  <link href="http://z420.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://z420.github.io/"/>
  <updated>2014-02-21T10:45:50+08:00</updated>
  <id>http://z420.github.io/</id>
  <author>
    <name><![CDATA[Mz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[观察者设计模式]]></title>
    <link href="http://z420.github.io/blog/2013/12/30/observer/"/>
    <updated>2013-12-30T14:51:00+08:00</updated>
    <id>http://z420.github.io/blog/2013/12/30/observer</id>
    <content type="html"><![CDATA[<p>在java.util包中提供了Observable类和Observer接口，使用它们即可完成观察者模式。需要<strong>被观察的类必须继承Observable类</strong>，Observable类的常用方法如下<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void addObserver(Observer o) 添加一个观察者&lt;br/>
</span><span class='line'>public void deleteObserver(Observer o) 删除一个观察者&lt;br/>
</span><span class='line'>protected void setChanged() 被观察者状态发生改变&lt;br/>
</span><span class='line'>public void notifyObservers(Object arg) 通知所有观察者状态改变&lt;br/></span></code></pre></td></tr></table></div></figure></notextile></div>
然后<strong>每一个观察者类都需要实现Observer接口</strong>，Observer接口定义如下：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface Observer{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>void update(Observable o,Object arg);
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.util.Observable;
</span><span class='line'>import java.util.Observer;
</span><span class='line'>class House extends Observable{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>private float price;
</span><span class='line'>public House(float price){
</span><span class='line'>    this.price = price;
</span><span class='line'>}
</span><span class='line'>public float getPrice(){
</span><span class='line'>    return price;
</span><span class='line'>}
</span><span class='line'>public void setPrice(float price){
</span><span class='line'>    super.setChanged();
</span><span class='line'>    super.notifyObservers(price);
</span><span class='line'>    this.price = price;
</span><span class='line'>}
</span><span class='line'>public String toString(){
</span><span class='line'>    return "房子的价格为：" + this.price; 
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>class HousePriceObserver implements Observer{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>private String name;
</span><span class='line'>public HousePriceObserver(String name){
</span><span class='line'>    this.name = name;
</span><span class='line'>}
</span><span class='line'>public  void update(Observable obj,Object arg){
</span><span class='line'>    if(arg instanceof Float){
</span><span class='line'>        System.out.print(this.name + "观察到的价格为：");
</span><span class='line'>        System.out.println(((Float)arg).floatValue());
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>public class ObserDemo01{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public static void main(String[] args){
</span><span class='line'>    House h = new House(100000);
</span><span class='line'>    HousePriceObserver hpo1 = new HousePriceObserver("观察者1");
</span><span class='line'>    HousePriceObserver hpo2 = new HousePriceObserver("观察者2");
</span><span class='line'>    HousePriceObserver hpo3 = new HousePriceObserver("观察者3");
</span><span class='line'>    h.addObserver(hpo1);
</span><span class='line'>    h.addObserver(hpo2);
</span><span class='line'>    h.addObserver(hpo3);
</span><span class='line'>    System.out.println(h);
</span><span class='line'>    h.setPrice(160000);
</span><span class='line'>    System.out.println(h);
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[泛型方法]]></title>
    <link href="http://z420.github.io/blog/2013/11/29/fanxing-fun/"/>
    <updated>2013-11-29T15:47:00+08:00</updated>
    <id>http://z420.github.io/blog/2013/11/29/fanxing-fun</id>
    <content type="html"><![CDATA[<p>可以在类中定义泛型化的方法，也可以在类中定义泛型化的方法。泛型方法的定义与其所在的类是否是泛型类是没有任何关系的，所在的类可以是泛型类，也可以不是泛型类。<br/>
在泛型方法中可以定义泛型参数，此时，参数的类型就是传入数据的类型，可以使用如下的格式定义泛型方法。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[访问权限]&lt;泛型标识> 泛型标识 方法名称([泛型标识 参数名称])</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Demo{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public &lt;T&gt; T fun(T t){
</span><span class='line'>    return t;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>public class GenericsDemo {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public static void main(String[] args){
</span><span class='line'>    Demo d = new Demo();
</span><span class='line'>    String str = d.fun("王");
</span><span class='line'>    int i = d.fun(30);
</span><span class='line'>    System.out.println(str);
</span><span class='line'>    System.out.println(i);
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
如果可以通过泛型方法返回一个泛型类的实例化对象，则必须在方法的返回类型声明处明确的指定泛型标识
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Info&lt;T extends Number>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>private T var;
</span><span class='line'>public T getVar(){
</span><span class='line'>    return var;
</span><span class='line'>}
</span><span class='line'>public void setVar(T var){
</span><span class='line'>    this.var = var;
</span><span class='line'>}
</span><span class='line'>public String toString(){
</span><span class='line'>    return this.var.toString();
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>public class GenericsDemo13 {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public static void main(String[] args){
</span><span class='line'>    Info&lt;Integer&gt; i = fun(30);
</span><span class='line'>    System.out.println(i.getVar());
</span><span class='line'>}
</span><span class='line'>public static  &lt;T extends Number&gt;  Info&lt;T&gt; fun(T param){
</span><span class='line'>    Info&lt;T&gt; temp = new Info&lt;T&gt;();
</span><span class='line'>    temp.setVar(param);
</span><span class='line'>    return temp;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[泛型接口]]></title>
    <link href="http://z420.github.io/blog/2013/11/29/fanxing-interface/"/>
    <updated>2013-11-29T11:08:00+08:00</updated>
    <id>http://z420.github.io/blog/2013/11/29/fanxing-interface</id>
    <content type="html"><![CDATA[<p><strong>泛型接口</strong>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[访问权限] interface 接口名称&lt;泛型标识>｛
</span><span class='line'>｝</span></code></pre></td></tr></table></div></figure></notextile></div>
<strong>泛型接口的两种实现方式</strong><br/>
1.直接在子类后声明泛型-在子类的定义上声明泛型类型。<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface Info&lt;T>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public T getVar();
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>class InfoImpl&lt;T> implements Info&lt;T>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>private T var;
</span><span class='line'>public InfoImpl(T var){
</span><span class='line'>    this.setVar(var);
</span><span class='line'>}
</span><span class='line'>public void setVar(T var){
</span><span class='line'>    this.var = var;
</span><span class='line'>}
</span><span class='line'>public T getVar(){
</span><span class='line'>    return this.var;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>public class GenericsDemo11 {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public static void main(String[] args){
</span><span class='line'>    Info&lt;String&gt; i = null;  //定义接口对象
</span><span class='line'>    i = new InfoImpl&lt;String&gt;("李");  //通过子类实例化此对象
</span><span class='line'>    System.out.println("姓名：" + i.getVar());
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div>
2.直接在子类实现的接口中明确的给出泛型类型-直接在接口中指定具体类型。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface Info&lt;T>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public T getVar();
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>class InfoImpl implements Info&lt;String>{  //定义泛型接口的子类，指定类型为String&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>private String var;
</span><span class='line'>public InfoImpl(String var){
</span><span class='line'>    this.setVar(var);
</span><span class='line'>}
</span><span class='line'>public void setVar(String var){
</span><span class='line'>    this.var = var;
</span><span class='line'>}
</span><span class='line'>public String getVar(){
</span><span class='line'>    return this.var;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>public class GenericsDemo11 {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public static void main(String[] args){
</span><span class='line'>    Info&lt;String&gt; i = null;  //定义接口对象,指定泛型
</span><span class='line'>    i = new InfoImpl("李");  //通过子类实例化此对象，不用指定泛型
</span><span class='line'>    System.out.println("姓名：" + i.getVar());
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[受限泛型]]></title>
    <link href="http://z420.github.io/blog/2013/11/29/shouxianfanxing/"/>
    <updated>2013-11-29T09:22:00+08:00</updated>
    <id>http://z420.github.io/blog/2013/11/29/shouxianfanxing</id>
    <content type="html"><![CDATA[<p>在引用传递中，在泛型操作中也可以设置一个泛型对象的范围上限和范围下限。范围上限使用extends关键字声明，表示参数化的类型可能是所指定的类型或者是此类型的子类，而范围下限使用super进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，或是Object类，具体格式如下。<br/>
<strong>设置上限</strong><br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>声明对象：类名称&lt;? extends 类> 对象名称
</span><span class='line'>定义类：[访问权限] 类名称&lt;泛型标识 extends 类>{}</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Info&lt;T>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>private T var;
</span><span class='line'>public T getVar(){
</span><span class='line'>    return var;
</span><span class='line'>}
</span><span class='line'>public void setVar(T var){
</span><span class='line'>    this.var = var;
</span><span class='line'>}
</span><span class='line'>public String toString(){
</span><span class='line'>    return this.var.toString();
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>public class GenericsDemo10 {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public static void main(String[] args){
</span><span class='line'>    Info&lt;Integer&gt; i1 = new Info&lt;Integer&gt;();
</span><span class='line'>    Info&lt;Float&gt; i2 = new Info&lt;Float&gt;();
</span><span class='line'>    i1.setVar(30);
</span><span class='line'>    i2.setVar(30.1f);
</span><span class='line'>    fun(i1);
</span><span class='line'>    fun(i2);
</span><span class='line'>}
</span><span class='line'>public static void fun(Info&lt;? extends Number&gt; temp){
</span><span class='line'>    System.out.print(temp + " ");
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
<strong>在类定义时指定泛型的上限</strong><br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Info&lt;T extends Number>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>private T var;
</span><span class='line'>public T getVar(){
</span><span class='line'>    return var;
</span><span class='line'>}
</span><span class='line'>public void setVar(T var){
</span><span class='line'>    this.var = var;
</span><span class='line'>}
</span><span class='line'>public String toString(){
</span><span class='line'>    return this.var.toString();
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>public class GenericsDemo10 {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public static void main(String[] args){
</span><span class='line'>    Info&lt;Integer&gt; i1 = new Info&lt;Integer&gt;();
</span><span class='line'>    Info&lt;Float&gt; i2 = new Info&lt;Float&gt;();
</span><span class='line'>    i1.setVar(30);
</span><span class='line'>    i2.setVar(30.1f);
</span><span class='line'>    System.out.println(i1.getVar() + " " + i2.getVar());
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div>
<strong>设置下限</strong><br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>声明对象：类名称&lt;? super 类> 对象名称
</span><span class='line'>定义类：[访问权限] 类名称&lt;泛型标识 extends 类>{}</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Info&lt;T>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>private T var;
</span><span class='line'>public T getVar(){
</span><span class='line'>    return var;
</span><span class='line'>}
</span><span class='line'>public void setVar(T var){
</span><span class='line'>    this.var = var;
</span><span class='line'>}
</span><span class='line'>public String toString(){
</span><span class='line'>    return this.var.toString();
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>public class GenericsDemo10 {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public static void main(String[] args){
</span><span class='line'>    Info&lt;Object&gt; i1 = new Info&lt;Object&gt;();
</span><span class='line'>    Info&lt;String&gt; i2 = new Info&lt;String&gt;();
</span><span class='line'>    i1.setVar(new Object());
</span><span class='line'>    i2.setVar("王");
</span><span class='line'>    fun(i1);
</span><span class='line'>    fun(i2);
</span><span class='line'>}
</span><span class='line'>public static void fun(Info&lt;? super String&gt; temp){
</span><span class='line'>    System.out.println("内容：" + temp);
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;一个类的子类可以通过对象多态性为其父类实例化，但是在泛型操作中，子类的泛型类型是无法使用父类的泛型类型接收的，例如，info<String>不能使用info<Object>接收。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Demo{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public static void main(String[] args){
</span><span class='line'>    Info&lt;String&gt; i1 = new Info&lt;String&gt;();
</span><span class='line'>    Info&lt;String&gt; i2 = null;
</span><span class='line'>    i2 = i1; //此处子类泛型不能向上转型为父类泛型，报错。
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[泛型操作-通配符]]></title>
    <link href="http://z420.github.io/blog/2013/11/26/tongpeifu/"/>
    <updated>2013-11-26T19:55:00+08:00</updated>
    <id>http://z420.github.io/blog/2013/11/26/tongpeifu</id>
    <content type="html"><![CDATA[<p>1.Java中引入了通配符“？”，表示可以接收此类型的任意泛型对象。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Info&lt;T>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>private T var;
</span><span class='line'>public T getVar(){
</span><span class='line'>    return var;
</span><span class='line'>}
</span><span class='line'>public void setVar(T var){
</span><span class='line'>    this.var = var;
</span><span class='line'>}
</span><span class='line'>public String toString(){
</span><span class='line'>    return this.var.toString();
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>public class GenericsDemo10 {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public static void main(String[] args){
</span><span class='line'>    Info&lt;Object&gt; i = new Info&lt;Object&gt;();       //警告，没有指定泛型类型。
</span><span class='line'>    i.setVar("王");
</span><span class='line'>    fun(i);
</span><span class='line'>}
</span><span class='line'>public static void fun(Info&lt;?&gt; temp){
</span><span class='line'>    System.out.println("姓名：" + temp);
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
